#include <stdio.h>

int main() {
    int n, i, sum = 0, first = 1;

    printf("Enter a positive integer: ");
    scanf("%d", &n);

    printf("Sum expression: ");

    for (i = 1; i <= n; ++i) {
        if (i % 3 == 0 || i % 5 == 0) {
            if (!first) {
                printf(" + ");
            }
            printf("%d", i);
            sum += i;
            first = 0;
        }
    }

    printf(" = %d\n", sum);
    return 0;
}
Certainly! Let's walk through your C program step-by-step and explain what it's doing logically:

---

### ðŸ”¹ **Objective of the Program:**

It takes a **positive integer `n`** from the user and calculates the **sum of all numbers from `1` to `n`** that are:

* **divisible by 3 or 5**,
* **but NOT divisible by 15**.

It also prints the **expression of the sum**, like:

```
3 + 5 + 6 + 9 + 10 + 12 = 45
```

---

### ðŸ”¹ **Code Breakdown:**

```c
int n, i, sum = 0, first = 1;
```

* `n`: the user input (upper limit).
* `i`: loop counter.
* `sum`: stores the final sum.
* `first`: a flag to help format the `+` sign properly.

---

### ðŸ”¹ **Input Section:**

```c
printf("Enter a positive integer: ");
scanf("%d", &n);
```

Prompts the user to enter a number, which is stored in `n`.

---

### ðŸ”¹ **Output Heading:**

```c
printf("Sum expression: ");
```

Just a label for the expression that will be printed next.

---

### ðŸ”¹ **Main Loop:**

```c
for (i = 1; i <= n; ++i) {
```

Loops from `1` to `n`.

#### âœ… Inside the loop:

```c
if ((i % 3 == 0 || i % 5 == 0) && !(i % 15 == 0)) {
```

* `(i % 3 == 0 || i % 5 == 0)` checks if `i` is divisible by **3 or 5**.
* `!(i % 15 == 0)` ensures it is **not divisible by 15**.

This filters numbers divisible by **only 3 or only 5**, but **not both** (since `15` is LCM of 3 and 5).

#### âž• Handling the `+` symbol:

```c
if (!first) {
    printf(" + ");
}
```

* `first` is initially `1` (true).
* So this **skips the plus sign** before the first number.
* After printing the first number, `first` is set to `0`, and `+` will be printed before each next number.

#### ðŸ“¤ Print and Add:

```c
printf("%d", i);
sum += i;
first = 0;
```

* Prints the current number in the sum expression.
* Adds it to the `sum`.
* Sets `first = 0` so the next number gets a `+`.

---

### ðŸ”š **After the Loop:**

```c
printf(" = %d\n", sum);
```

Prints the final result after the sum expression.

---

### ðŸ”¹ **Example:**

**Input:** `n = 20`
**Output:**

```
Sum expression: 3 + 5 + 6 + 9 + 10 + 12 + 18 + 20 = 83
```

* Included: 3, 5, 6, 9, 10, 12, 18, 20
* Skipped: 15 (divisible by both 3 and 5)

---
